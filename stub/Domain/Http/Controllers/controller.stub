<?php

namespace Src\Domain\{{DOMAIN}}\Http\Controllers;

use Src\Infrastructure\Http\AbstractControllers\BaseController as Controller;
use Src\Domain\{{DOMAIN}}\Http\Requests\{{NAME_REQUEST}}\{{NAME_REQUEST_STORE}};
use Src\Domain\{{DOMAIN}}\Http\Requests\{{NAME_REQUEST}}\{{NAME_REQUEST_UPDATE}};
use Src\Domain\{{DOMAIN}}\Repositories\Contracts\{{NAME_REPO}};
use Illuminate\Http\Request;
use theaddresstechnology\DDD\Traits\Responder;
use Src\Domain\{{DOMAIN}}\Entities\{{NAME}};
use Src\Domain\{{DOMAIN}}\Http\Resources\{{API_RESOURCE_NAME}}\{{API_RESOURCE_NAME}}ResourceCollection;
use Src\Domain\{{DOMAIN}}\Http\Resources\{{API_RESOURCE_NAME}}\{{API_RESOURCE_NAME}}Resource;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;

class {{NAME}}Controller extends Controller
{
    use Responder;

    /**
     * @var {{NAME_REPO}}
     */
    protected ${{NAME_REPO_VAR}};

    /**
     * View Path
     *
     * @var string
     */
    protected $viewPath = '{{VIEW_RESOURCE}}';

    /**
     * Resource Route.
     *
     * @var string
     */
    protected $resourceRoute = '{{RESOURCE_ROUTE_NAME}}';

    /**
     * Domain Alias.
     *
     * @var string
     */
    protected $domainAlias = '{{DOMAIN_ALIAS}}';


    /**
     * @param {{NAME_REPO}} ${{NAME_REPO_VAR}}
     */
    public function __construct({{NAME_REPO}} ${{NAME_REPO_VAR}})
    {
        $this->{{NAME_REPO_VAR}} = ${{NAME_REPO_VAR}};
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        try{
           $index = $this->{{NAME_REPO_VAR}}->spatie()->paginate();

           $this->setData('title', __('main.show-all') . ' ' . __('main.{{VIEW_RESOURCE}}'));

           $this->setData('alias', $this->domainAlias);

           $this->setData('data', $index);

           $this->useCollection({{API_RESOURCE_NAME}}ResourceCollection::class,'data');

        }catch(\Exception $e){
            $this->setApiResponse(fn () => response()->json(['message' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR));
        }

        return $this->response();
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $this->setData('title', __('main.add') . ' ' . __('main.{{VIEW_RESOURCE}}'), 'web');

        $this->setData('alias', $this->domainAlias,'web');

        $this->setApiResponse(fn()=> response()->json(['create_your_own_form'=>true]));

        return $this->response();
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store({{NAME_REQUEST_STORE}} $request)
    {
        try{
           DB::beginTransaction();

           $store = $this->{{NAME_REPO_VAR}}->create($request->validated());

           $this->setData('data', $store);

           DB::commit();

           $this->useCollection({{API_RESOURCE_NAME}}Resource::class, 'data');
        }catch(\Exception $e){
            DB::rollBack();
            $this->setApiResponse(fn () => response()->json(['message' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR));
        }
        return $this->response();
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show({{NAME}} ${{VIEW_RESOURCE}})
    {
       try {
           ${{VIEW_RESOURCE}}=$this->{{NAME_REPO_VAR}}->spatie()->find(${{VIEW_RESOURCE}}->id);

           $this->setData('show', ${{VIEW_RESOURCE}});

           $this->useCollection({{API_RESOURCE_NAME}}Resource::class,'show');
       }
       catch (\Exception $e) {
          $this->setApiResponse(fn () => response()->json(['message' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR));
       }

        return $this->response();
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit({{NAME}} ${{VIEW_RESOURCE}})
    {
        $this->setData('title', __('main.edit') . ' ' . __('main.{{VIEW_RESOURCE}}') . ' : ' . ${{VIEW_RESOURCE}}->id, 'web');

        $this->setData('alias', $this->domainAlias,'web');

        $this->setData('edit', ${{VIEW_RESOURCE}});

        $this->useCollection({{API_RESOURCE_NAME}}Resource::class,'edit');

        return $this->response();
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update({{NAME_REQUEST_UPDATE}} $request,{{NAME}} ${{VIEW_RESOURCE}})
    {
        try{
            DB::beginTransaction();

            $update = $this->{{NAME_REPO_VAR}}->update($request->validated(), ${{VIEW_RESOURCE}}->id);

            $this->setData('data', $update);

             DB::commit();

            $this->useCollection({{API_RESOURCE_NAME}}Resource::class, 'data');
        }catch(\Exception $e) {
             DB::rollBack();
             $this->setApiResponse(fn () => response()->json(['message' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR));
        }

        return $this->response();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  {{NAME}} ${{VIEW_RESOURCE}}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{NAME}} ${{VIEW_RESOURCE}})
    {
        try{
           ${{VIEW_RESOURCE}}->delete();

            $this->setApiResponse(fn () => response()->json(['deleted' => true], 200));
        }catch (\Exception $e) {
            $this->setApiResponse(fn () => response()->json(['deleted' => false, 'message' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR));
        }
        return $this->response();
    }

}
